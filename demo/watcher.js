(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Watcher = factory());
}(this, (function () { 'use strict';

// ----------------------------------------------------
var WatchEvent;
(function (WatchEvent) {
    WatchEvent[WatchEvent["ElementsAdded"] = 0] = "ElementsAdded";
    WatchEvent[WatchEvent["ElementsRemoved"] = 1] = "ElementsRemoved";
    WatchEvent[WatchEvent["ElementsChanged"] = 2] = "ElementsChanged";
    WatchEvent[WatchEvent["AttributesChanged"] = 3] = "AttributesChanged";
    WatchEvent[WatchEvent["TextChanged"] = 4] = "TextChanged";
})(WatchEvent || (WatchEvent = {}));

const LINK = 'color: #05f; font-weight: normal; text-decoration: underline';
const KW = 'color: #35b; font-weight: bold; font-style: normal; text-decoration: none';
const ATTR = 'color: #563; font-weight: normal; font-style: italic; text-decoration: none';
const VAL = 'color: #c36; font-weight: normal; font-style: normal; text-decoration: none';

// ----------------------------------------------------
function getSelectorFunction(selector) {
    return function (element) {
        const matches = [];
        if (element.matches(selector)) {
            matches.push(element);
        }
        return matches.concat(Array.from(element.querySelectorAll(selector)));
    };
}
// ----------------------------------------------------
function getElementNodes(nodes) {
    return nodes.filter(node => node instanceof HTMLElement);
}

// ----------------------------------------------------------
const DEFAULT_OPTIONS = {
    event: WatchEvent.ElementsChanged,
    attributes: []
};
// ----------------------------------------------------------
class Watch {
    constructor(cssSelector, callback, options = {}) {
        this.cssSelector = cssSelector;
        this.callback = callback;
        this.context = null;
        this.findExisting = true;
        this.selector = getSelectorFunction(this.cssSelector);
        options = Object.assign({}, DEFAULT_OPTIONS, options);
        if (options.context != null) {
            this.context = options.context;
        }
        if (typeof options.findExisting === 'boolean') {
            this.findExisting = options.findExisting;
        }
        this.events = new Set(options.event ? [options.event] : options.events);
        if (this.events.has(WatchEvent.ElementsChanged)) {
            this.events.add(WatchEvent.ElementsAdded);
            this.events.add(WatchEvent.ElementsRemoved);
        }
        this.attributes = new Set(options.attribute ? [options.attribute] : options.attributes);
    }
    // ----------------------------------------------------
    invoke(added, removed) {
        const changes = {
            added,
            removed
        };
        this.callback.call(this.context, changes);
    }
    // ----------------------------------------------------
    dump() {
        console.groupCollapsed(`%cWatch(%cselector: %c"${this.cssSelector}"%c)`, KW, ATTR, LINK, KW);
        console.log(this.callback.toString());
        if (this.context) {
            console.dir(this.context);
        }
        console.groupEnd();
    }
}

// ----------------------------------------------------------
class Watcher {
    constructor(root = document.body, debug = false) {
        this.root = root;
        this.debug = debug;
        this.observer = null;
        this.watchMap = new Map();
        if (!(root instanceof HTMLElement)) {
            throw new TypeError('Watch root is not a valid HTML element!');
        }
    }
    // ----------------------------------------------------
    add(selector, callback, options = {}) {
        if (this.debug) {
            console.groupCollapsed(`%cWatcher.add(%c${selector}%c, %c${this.count} watches%c)`, KW, LINK, KW, VAL, KW);
            console.log(callback.toString());
            if (options) {
                console.dir(options);
            }
            console.groupEnd();
        }
        const watch = new Watch(selector, callback, options);
        this.watchMap.set(selector, watch);
        return watch;
    }
    // ----------------------------------------------------
    processSummaries(summaries) {
        summaries.forEach(summary => this.processSummary(summary));
    }
    // ----------------------------------------------------
    getAllMatchingElements(selector, rootElements) {
        rootElements.map(selector);
    }
    // ----------------------------------------------------
    processSummary(summary) {
        if (this.debug) {
            console.groupCollapsed(`%cWatcher.processSummary(%ctype=%c${summary.type}%c)`, KW, ATTR, VAL, KW);
            console.dir(summary);
            console.groupEnd();
        }
        const addedElements = getElementNodes(Array.from(summary.addedNodes));
        const removedElements = getElementNodes(Array.from(summary.removedNodes));
        for (const watch of this.watches) {
            const matchingElementsAdded = new Set(addedElements.map(watch.selector).reduce((out, elems) => [...out, ...elems], []));
            const matchingElementsRemoved = new Set(addedElements.map(watch.selector).reduce((out, elems) => [...out, ...elems], []));
            if (matchingElementsAdded.size || matchingElementsRemoved.size) {
                watch.invoke([...matchingElementsAdded], [...matchingElementsRemoved]);
            }
        }
    }
    // ----------------------------------------------------
    get enabled() {
        return !!this.observer;
    }
    // ----------------------------------------------------
    get count() {
        return Object.keys(this.watchMap).length;
    }
    // ----------------------------------------------------
    get watches() {
        return [...Object.values(this.watchMap)];
    }
    // ----------------------------------------------------
    start() {
        if (this.debug) {
            console.info(`%cWatcher.start(%cenabled = %c${this.enabled ? 'true' : 'false'}%c, %c${this.count} watches%c)`, KW, ATTR, VAL, KW, VAL, KW);
        }
        if (!this.observer) {
            // Check for existing elements, pass to callback
            this.watches
                .map(watch => ({ watch, added: watch.selector(this.root) }))
                .filter(({ added }) => added.length > 0)
                .forEach(({ watch, added }) => watch.invoke(added, []));
            this.observer = new MutationObserver(summaries => {
                this.processSummaries(summaries);
            });
            this.observer.observe(this.root, {
                childList: true,
                attributes: true,
                subtree: true
            });
        }
        return this;
    }
    // ----------------------------------------------------
    stop() {
        if (this.observer) {
            this.processSummaries(this.observer.takeRecords());
            this.observer.disconnect();
            this.observer = null;
        }
        return this;
    }
}

return Watcher;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
